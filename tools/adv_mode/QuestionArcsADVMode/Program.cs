using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace QuestionArcsADVMode
{
    internal class CharacterCountInserter
    {
        public static readonly Regex langEnAtStartOfLine = new Regex(@"^\s*langen", RegexOptions.IgnoreCase);
        public static readonly Regex multipleColonsRegex = new Regex(@":+");
        public LineParser lp;
        public PhraseCharacterCounter characterCounter;

        public CharacterCountInserter()
        {
            lp = new LineParser();
            characterCounter = new PhraseCharacterCounter();
        }

        public string ProcessOneLine(string line)
        {
            //skip any non 'langen' lines
            if (!langEnAtStartOfLine.IsMatch(line))
            {
                return line;
            }

            Debug.Print(line);

            //iterate through all the tokens in the line
            lp.LoadLine(line);
            StringBuilder sb = new StringBuilder();
            Token lastToken = null;
            foreach (Token token in lp.Iter())
            {
                sb.Append(HandleToken(token, lastToken));
                lastToken = token;
            }

            //filter out any duplicate :::: generated by inserter
            return multipleColonsRegex.Replace(sb.ToString(), ":");
        }

        private string HandleToken(Token token, Token lastToken)
        {
            switch (token)
            {
                case TextToken textToken:
                    int count = characterCounter.GetCharacterCount(token.RawString);
                    Debug.Print($"Phrase [{token.RawString}] is {count} chars long");
                    //only add a colon if the last token wasn't a colon (should make this work more generically later)
                    return $"{(lastToken is ColonToken ? string.Empty : ":")}charCount {count}:{token.RawString}";
                    break;

                case GenericToken genericToken:
                    Debug.Print($"Got generic token {token.RawString}");
                    return token.RawString;
                    break;

                case ColonToken colonToken:
                    return token.RawString;
                    break;

                default:
                    throw new NotImplementedException();

                case null:
                    throw new ArgumentNullException();
            }
        }
    }

    internal class Program
    {

        private static void Main(string[] args)
        {
            string input_script = @"C:\drojf\large_projects\umineko\umineko_question_repo\InDevelopment\ManualUpdates\0.utf";
            string output_script = @"C:\drojf\large_projects\umineko\umineko_question_repo\InDevelopment\ManualUpdates\0_new.utf";
            using (System.IO.StreamReader file = new System.IO.StreamReader(input_script, Encoding.UTF8))
            using (System.IO.StreamWriter outputFile = new System.IO.StreamWriter(output_script, append: false, encoding: Encoding.UTF8))
            {
                string line;

                CharacterCountInserter characterCountInserter = new CharacterCountInserter();

                int line_count = 0;
                while ((line = file.ReadLine()) != null)
                {
                    string newLine = characterCountInserter.ProcessOneLine(line);
                    outputFile.WriteLine(newLine);
                    line_count++;
                }
            }

        }

    }

}


